name: 3-Data-Monitoring

on:
  workflow_run:
    workflows: ["2-Data-Ingestion"]
    types:
      - completed
  schedule:
    - cron: '0 */6 * * *'  # Ejecutar cada 6 horas
  workflow_dispatch:  # Permite ejecución manual

jobs:
  monitor_database:
    name: Monitorear base de datos
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Instalar dependencias con setup.py
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          
      - name: Descargar base de datos desde artefactos
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: 2-Data-Ingestion.yml
          workflow_conclusion: success
          name: dolar-sqlite-db
          path: src/edu_pad/static/db/
          
      - name: Verificar existencia de la base de datos
        id: check_db
        run: |
          if [ -f "src/edu_pad/static/db/dolar_analisis.db" ]; then
            echo "db_exists=true" >> $GITHUB_OUTPUT
            echo "Base de datos encontrada. Procediendo con el monitoreo..."
          else
            echo "db_exists=false" >> $GITHUB_OUTPUT
            echo "Error: Base de datos no encontrada"
            exit 1
          fi
          
      - name: Crear directorio de logs
        if: steps.check_db.outputs.db_exists == 'true'
        run: mkdir -p src/edu_pad/static/logs
          
      - name: Copiar script de monitoreo
        if: steps.check_db.outputs.db_exists == 'true'
        run: |
          mkdir -p src/edu_pad
          cp monitor.py src/edu_pad/
          
      - name: Ejecutar monitoreo
        if: steps.check_db.outputs.db_exists == 'true'
        env:
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
          EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
        run: python src/edu_pad/monitor.py
        
      - name: Subir logs como artefacto
        if: steps.check_db.outputs.db_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: monitor-logs
          path: src/edu_pad/static/logs/
          retention-days: 30
          
      - name: Actualizar logs en el repositorio
        if: steps.check_db.outputs.db_exists == 'true' && github.event_name != 'schedule'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          git add src/edu_pad/static/logs/monitor_log.json || true
          git commit -m "Actualiza logs de monitoreo [skip ci]" || true
          git push || true